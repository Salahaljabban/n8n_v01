{
  "name": "Real-time Wazuh Webhook Receiver",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "wazuh-webhook",
        "options": { "noResponseBody": false }
      },
      "id": "3eb150e7-5802-4b9c-b012-fd94148817b7",
      "name": "Wazuh Webhook Receiver",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [272, -288],
      "webhookId": "wazuh-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Normalize Wazuh alert safely (no throws)\nconst parseMaybeJson = (v)=>{ if(v==null) return null; if(typeof v==='object') return v; if(typeof v==='string'){ try { return JSON.parse(v); } catch { return null; } } return null; };\nconst toStr=(v,d='unknown')=> (v===undefined||v===null?d:String(v));\nconst toNum=(v,d=0)=>{ const n=Number(v); return Number.isFinite(n)?n:d; };\nconst raw = $input.first();\nconst item = raw?.json ?? {};\nlet payload = ('body' in item) ? item.body : item;\nconst parsed = parseMaybeJson(payload);\nif (parsed) payload = parsed;\nif (payload && typeof payload==='object' && 'alert' in payload) {\n  const maybe = parseMaybeJson(payload.alert) ?? payload.alert;\n  if (maybe && typeof maybe==='object') payload = { ...payload, ...maybe };\n}\nconst ruleObj = (payload && typeof payload==='object' && payload.rule && typeof payload.rule==='object') ? payload.rule : {};\nconst agentObj = (payload && typeof payload==='object' && payload.agent && typeof payload.agent==='object') ? payload.agent : {};\nconst rule_id = toStr(ruleObj.id ?? ruleObj.rule_id ?? payload.rule_id ?? payload.id ?? 'custom', 'custom');\nnconst rule_level = toNum(ruleObj.level ?? ruleObj.rule_level ?? payload.rule_level ?? payload.level ?? 0, 0);\nconst rule_description = toStr(ruleObj.description ?? ruleObj.rule_description ?? payload.rule_description ?? payload.description ?? 'Unknown rule', 'Unknown rule');\nconst normalized = {\n  alert_id: toStr(payload.id ?? `alert-${Date.now()}`),\n  timestamp: toStr(payload.timestamp ?? new Date().toISOString()),\n  rule_id,\n  rule_description,\n  rule_level,\n  agent_id: toStr(agentObj.id),\n  agent_name: toStr(agentObj.name),\n  agent_ip: toStr(agentObj.ip),\n  location: toStr(payload.location,''),\n  full_log: toStr(payload.full_log,''),\n  decoder_name: toStr(payload?.decoder?.name,''),\n  data: (payload && typeof payload.data==='object') ? payload.data : {},\n  previous_output: toStr(payload.previous_output,''),\n  syscheck: (payload && 'syscheck' in payload) ? payload.syscheck : null,\n  rootcheck: (payload && 'rootcheck' in payload) ? payload.rootcheck : null,\n};\nlet severity = 'low'; let priority = 'normal'; let requiresImmediateAction = false;\nif (normalized.rule_level >= 12) { severity='critical'; priority='high'; requiresImmediateAction=true; }\nelse if (normalized.rule_level >= 7) { severity='high'; priority='high'; requiresImmediateAction=true; }\nelse if (normalized.rule_level >= 4) { severity='medium'; }\nconst descLC = normalized.rule_description.toLowerCase();\nconst keywords=['attack','intrusion','malware','rootkit','exploit','breach','unauthorized'];\nif (keywords.some(k=>descLC.includes(k))) { requiresImmediateAction = true; if (severity==='low') severity='medium'; }\nconst validation_notes = [];\nif (!ruleObj && !('level' in (payload||{})) && !('rule_level' in (payload||{}))) validation_notes.push('No explicit rule object; mapped from flat fields.');\nif (!ruleObj?.id && !payload?.rule_id && !payload?.id) validation_notes.push('No rule id present; defaulted to \"custom\".');\nreturn { ...normalized, severity, priority, requires_immediate_action: requiresImmediateAction, received_at: new Date().toISOString(), processing_status: 'received', source: 'wazuh_webhook', validation_notes };"
      },
      "id": "ac43b2c7-b4f8-45e1-87aa-b7bbabd8cf92",
      "name": "Normalize Alert",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [512, -288]
    },
    {
      "parameters": {
        "url": "={{ ($env.WAZUH_API_URL || 'https://172.20.18.14:55000').replace(/\\/$/, '') + '/security/user/authenticate' }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": { "parameters": [ { "name": "Content-Type", "value": "application/json" } ] },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            { "name": "username", "value": "={{ $env.WAZUH_API_USER || 'wazuh' }}" },
            { "name": "password", "value": "={{ $env.WAZUH_API_PASSWORD }}" }
          ]
        },
        "options": { "timeout": 15000, "allowUnauthorizedCerts": true }
      },
      "id": "50f96f45-ff1b-4c52-a265-f587c7ae7235",
      "name": "Get Wazuh Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [512, -112],
      "credentials": {
        "httpBasicAuth": {
          "id": "8Cc3P9EWCNkZvPOC",
          "name": "WAZUH_API"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": { "caseSensitive": true, "leftValue": "", "typeValidation": "strict", "version": 1 },
          "conditions": [ { "leftValue": "={{ $json.requires_immediate_action }}", "rightValue": true, "operator": { "type": "boolean", "operation": "true" }, "id": "pri" } ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "14af7cdd-a603-4df2-b6d0-78d0d062d312",
      "name": "Check Priority",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [752, -288]
    },
    {
      "parameters": {
        "url": "http://192.168.208.49:5678/webhook/high-priority-alert",
        "sendHeaders": true,
        "headerParameters": { "parameters": [ { "name": "Content-Type", "value": "application/json" }, { "name": "X-Source", "value": "wazuh-webhook-receiver" } ] },
        "sendBody": true,
        "bodyParameters": { "parameters": [ {} ] },
        "options": { "timeout": 30000 }
      },
      "id": "4941cc27-f141-412f-a488-88e597a06898",
      "name": "Route to High Priority",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1008, -512]
    },
    {
      "parameters": {
        "url": "http://foundation-sec:8000/alerts",
        "sendHeaders": true,
        "headerParameters": { "parameters": [ { "name": "Content-Type", "value": "application/json" }, { "name": "Authorization", "value": "Bearer {{ $node[\"Get Wazuh Token\"].json.data.token }}" } ] },
        "sendBody": true,
        "bodyParameters": { "parameters": [ {} ] },
        "options": { "timeout": 15000 }
      },
      "id": "14a5a587-8f4e-4db3-9d36-1fc0d124e12d",
      "name": "Buffer Standard Alert (FastAPI)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [976, -96]
    },
    {
      "parameters": {
        "jsCode": "const a = $('Normalize Alert').first().json; const hp=a.requires_immediate_action; const log={timestamp:new Date().toISOString(), alert_id:a.alert_id, rule_id:a.rule_id, rule_description:a.rule_description, severity:a.severity, agent:`${a.agent_name} (${a.agent_ip})`, processing_path: hp?'high_priority':'standard', response_ms: Date.now()-new Date(a.received_at).getTime()}; console.log('Wazuh alert processed', log); return { processing_summary: log, notification_needed: a.severity!=='low', severity: a.severity, alert:a };"
      },
      "id": "9791b9b9-e040-40b2-9baa-17ff40bf3e8d",
      "name": "Log Processing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1232, -288]
    },
    {
      "parameters": {
        "conditions": {
          "options": { "caseSensitive": true, "leftValue": "", "typeValidation": "strict", "version": 1 },
          "conditions": [ { "leftValue": "={{ $json.notification_needed }}", "rightValue": true, "operator": { "type": "boolean", "operation": "true" }, "id": "notify" } ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "60bc38d1-ab25-4543-a17c-2c0a6b16d905",
      "name": "Check Notification Needed",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1456, -288]
    },
    {
      "parameters": {
        "jsCode": "// Build Teams-safe HTML body\nconst a = $json.alert;\nconst sev = (a.severity||'low').toLowerCase();\nconst emoji = { critical:'🚨', high:'⚠️', medium:'🔶', low:'ℹ️' };\nconst title = `${emoji[sev]||'ℹ️'} Wazuh ${sev.toUpperCase()} alert`;\nconst esc = (s)=>String(s||'').replace(/[&<>]/g,c=>({\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\"}[c]));\nlet html = `<b>${esc(title)}</b><br/>`+\n  `<b>Alert ID:</b> ${esc(a.alert_id)}<br/>`+\n  `<b>Rule Level:</b> ${esc(a.rule_level)}<br/>`+\n  `<b>Agent:</b> ${esc(a.agent_name)} (${esc(a.agent_ip)})<br/>`+\n  `<b>Location:</b> ${esc(a.location)}<br/>`+\n  `<b>Rule:</b> ${esc(a.rule_description)}<br/>`+\n  `<b>Timestamp:</b> ${esc(a.timestamp)}<br/>`;\nif(a.full_log){\n  const sample = String(a.full_log).slice(0,200) + (a.full_log.length>200?'…':'');\n  html += `<br/><b>Log Sample:</b><br/><pre>${esc(sample)}</pre>`;\n}\nreturn { json: { contentType: 'html', content: html, severity: sev } };\n"
      },
      "id": "b5b7b5c2-0c76-4e4e-8b3b-9bd9e55d7f40",
      "name": "Build Teams Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1696, -384]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{ 'https://login.microsoftonline.com/' + ($env.GRAPH_TENANT_ID || 'common') + '/oauth2/v2.0/token' }}",
        "sendHeaders": true,
        "headerParameters": { "parameters": [ { "name": "Content-Type", "value": "application/x-www-form-urlencoded" } ] },
        "sendBody": true,
        "bodyContentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            { "name": "grant_type", "value": "client_credentials" },
            { "name": "client_id", "value": "={{ $env.GRAPH_CLIENT_ID }}" },
            { "name": "client_secret", "value": "={{ $env.GRAPH_CLIENT_SECRET }}" },
            { "name": "scope", "value": "https://graph.microsoft.com/.default" }
          ]
        },
        "options": { "timeout": 15000 }
      },
      "id": "get-graph-token",
      "name": "Get Graph Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1888, -512]
    },
    {
      "parameters": {
        "url": "=https://graph.microsoft.com/v1.0/me/joinedTeams",
        "sendHeaders": true,
        "headerParameters": { "parameters": [ { "name": "Authorization", "value": "={{ 'Bearer ' + $node[\"Get Graph Token\"].json.access_token }}" } ] },
        "options": { "timeout": 15000 },
        "authentication": "none"
      },
      "id": "b6b0d1f3-6f1c-4b49-8c2d-1cd2e5b7b1aa",
      "name": "Get Team: Wazoo",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [2128, -512]
    },
    {
      "parameters": {
        "jsCode": "// pick the team with displayName === 'Wazoo'\nconst teams = $json.value || [];\nconst team = teams.find(t => (t.displayName||'').toLowerCase() === 'wazoo');\nif(!team){\n  throw new Error('Team \"Wazoo\" not found. Ensure the signed-in user is a member, or broaden Graph scope.');\n}\nreturn { teamId: team.id };\n"
      },
      "id": "a8f6c88f-1f4b-4a3d-9fdd-6c7dbcb5c2aa",
      "name": "Select Team ID",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2128, -384]
    },
    {
      "parameters": {
        "url": "={{`https://graph.microsoft.com/v1.0/teams/${$json.teamId}/channels`}}",
        "sendHeaders": true,
        "headerParameters": { "parameters": [ { "name": "Authorization", "value": "={{ 'Bearer ' + $node[\"Get Graph Token\"].json.access_token }}" } ] },
        "options": { "timeout": 15000 },
        "authentication": "none"
      },
      "id": "c9b2a4a7-5c7f-4b2e-8c2a-2a2a6b3f1c2b",
      "name": "List Channels",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [2336, -512]
    },
    {
      "parameters": {
        "jsCode": "// pick channel with displayName === 'Wazoo notification'\nconst channels = $json.value || [];\nconst ch = channels.find(c => (c.displayName||'').toLowerCase() === 'wazoo notification');\nif(!ch){\n  throw new Error('Channel \"Wazoo notification\" not found in team Wazoo.');\n}\nreturn { teamId: $('Select Team ID').first().json.teamId, channelId: ch.id };\n"
      },
      "id": "e0b7b6e2-3fdc-4d52-9ebf-0f2f1f1b0e2d",
      "name": "Select Channel ID",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2544, -384]
    },
    {
      "parameters": {
        "url": "={{`https://graph.microsoft.com/v1.0/teams/${$json.teamId}/channels/${$json.channelId}/messages`}}",
        "sendHeaders": true,
        "headerParameters": { "parameters": [ { "name": "Authorization", "value": "={{ 'Bearer ' + $node[\"Get Graph Token\"].json.access_token }}" }, { "name": "Content-Type", "value": "application/json" } ] },
        "sendBody": true,
        "bodyParametersJson": "={{ { body: { contentType: $('Build Teams Message').first().json.contentType, content: $('Build Teams Message').first().json.content } } }}",
        "options": { "timeout": 15000 },
        "authentication": "none"
      },
      "id": "f1a8b7a6-1e5c-42cb-9c2b-1a0c5e7d9b3c",
      "name": "Post to Teams (Graph)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [2768, -512]
    },
    {
      "parameters": {
        "jsCode": "const a = $('Normalize Alert').first().json; const resp = { status: 'success', alert_id: a.alert_id, severity: a.severity, processing_path: a.requires_immediate_action ? 'high_priority' : 'standard', received_at: a.received_at, processed_at: new Date().toISOString() }; return resp;"
      },
      "id": "2aaf9d95-8b82-4965-88e7-af713e335d1f",
      "name": "Create Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2528, -288]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "194a5c8c-78f6-4bdc-b76e-004e460a3081",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2752, -288]
    },
    {
      "parameters": {
        "jsCode": "const e = $input.first(); const a = $('Normalize Alert').first()?.json; return { status: 'error', alert_id: a?.alert_id || 'unknown', error_message: e.message || 'Unknown error', timestamp: new Date().toISOString(), fallback_action: 'Logged for manual review' };"
      },
      "id": "bd7c1aaa-e5db-4e08-ae6a-79912be190b9",
      "name": "Handle Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1456, -64]
    }
  ],
  "connections": {
    "Wazuh Webhook Receiver": { "main": [ [ { "node": "Normalize Alert", "type": "main", "index": 0 } ] ] },
    "Normalize Alert": { "main": [ [ { "node": "Check Priority", "type": "main", "index": 0 } ], [ { "node": "Handle Error", "type": "main", "index": 0 } ] ] },
    "Check Priority": {
      "main": [
        [ { "node": "Route to High Priority", "type": "main", "index": 0 } ],
        [ { "node": "Buffer Standard Alert (FastAPI)", "type": "main", "index": 0 } ]
      ]
    },
    "Route to High Priority": { "main": [ [ { "node": "Log Processing", "type": "main", "index": 0 } ], [ { "node": "Handle Error", "type": "main", "index": 0 } ] ] },
    "Buffer Standard Alert (FastAPI)": { "main": [ [ { "node": "Log Processing", "type": "main", "index": 0 } ], [ { "node": "Handle Error", "type": "main", "index": 0 } ] ] },
    "Log Processing": { "main": [ [ { "node": "Check Notification Needed", "type": "main", "index": 0 } ] ] },
    "Check Notification Needed": {
      "main": [
        [ { "node": "Build Teams Message", "type": "main", "index": 0 } ],
        [ { "node": "Create Response", "type": "main", "index": 0 } ]
      ]
    },
    "Build Teams Message": { "main": [ [ { "node": "Get Graph Token", "type": "main", "index": 0 } ] ] },
    "Get Graph Token": { "main": [ [ { "node": "Get Team: Wazoo", "type": "main", "index": 0 } ] ] },
    "Get Team: Wazoo": { "main": [ [ { "node": "Select Team ID", "type": "main", "index": 0 } ] ] },
    "Select Team ID": { "main": [ [ { "node": "List Channels", "type": "main", "index": 0 } ] ] },
    "List Channels": { "main": [ [ { "node": "Select Channel ID", "type": "main", "index": 0 } ] ] },
    "Select Channel ID": { "main": [ [ { "node": "Post to Teams (Graph)", "type": "main", "index": 0 } ] ] },
    "Create Response": { "main": [ [ { "node": "Webhook Response", "type": "main", "index": 0 } ] ] },
    "Handle Error": { "main": [ [ { "node": "Webhook Response", "type": "main", "index": 0 } ] ] }
  },
  "active": true,
  "settings": { "executionOrder": "v1" }
}
