{
  "name": "Wazuh ‚Üí n8n (Normalize, Route, Buffer, Notify)",
  "active": false,
  "nodes": [
    {
      "id": "wazuh-webhook-receiver",
      "name": "Wazuh Webhook Receiver",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "parameters": {
        "httpMethod": "POST",
        "path": "wazuh-webhook",
        "responseMode": "onReceived",
        "options": {
          "noResponseBody": false
        }
      },
      "webhookId": "wazuh-webhook"
    },
    {
      "id": "normalize-alert",
      "name": "Normalize Alert",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [480, 300],
      "parameters": {
        "jsCode": "// Normalize & enrich incoming Wazuh alert\nconst raw = $input.first().json || {};\nif (!raw.rule || !raw.rule.id) throw new Error('Invalid Wazuh alert: missing rule.id');\nconst alert = {\n  alert_id: raw.id || `alert-${Date.now()}`,\n  timestamp: raw.timestamp || new Date().toISOString(),\n  rule_id: raw.rule.id,\n  rule_description: raw.rule.description || 'Unknown rule',\n  rule_level: Number(raw.rule.level || 0),\n  agent_id: raw.agent?.id || 'unknown',\n  agent_name: raw.agent?.name || 'unknown',\n  agent_ip: raw.agent?.ip || 'unknown',\n  location: raw.location || 'unknown',\n  full_log: raw.full_log || '',\n  decoder_name: raw.decoder?.name || 'unknown',\n  data: raw.data || {},\n  previous_output: raw.previous_output || '',\n  syscheck: raw.syscheck || null,\n  rootcheck: raw.rootcheck || null\n};\nlet severity = 'low';\nlet priority = 'normal';\nlet requiresImmediateAction = false;\nif (alert.rule_level >= 12) { severity = 'critical'; priority = 'high'; requiresImmediateAction = true; }\nelse if (alert.rule_level >= 7) { severity = 'high'; priority = 'high'; requiresImmediateAction = true; }\nelse if (alert.rule_level >= 4) { severity = 'medium'; }\nconst keywords = ['attack','intrusion','malware','rootkit','exploit','breach','unauthorized'];\nif (keywords.some(k => (alert.rule_description||'').toLowerCase().includes(k))) {\n  requiresImmediateAction = true; if (severity === 'low') severity = 'medium';\n}\nreturn {\n  ...alert,\n  severity,\n  priority,\n  requires_immediate_action: requiresImmediateAction,\n  received_at: new Date().toISOString(),\n  processing_status: 'received',\n  source: 'wazuh_webhook'\n};"
      }
    },
    {
      "id": "get-wazuh-token",
      "name": "Get Wazuh Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [480, 480],
      "parameters": {
        "url": "https://172.20.18.14:55000/security/user/authenticate",
        "requestMethod": "POST",
        "jsonBody": "{ \"username\": \"wazuh\", \"password\": \"{{ $env.WAZUH_API_PASSWORD }}\" }",
        "sendBody": true,
        "bodyContentType": "json",
        "options": {
          "timeout": 10000,
          "ignoreSSLIssues": true,
          "retry": {
            "enabled": true,
            "maxRetries": 2,
            "retryInterval": 2000
          }
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            { "name": "Content-Type", "value": "application/json" }
          ]
        }
      }
    },
    {
      "id": "check-priority",
      "name": "Check Priority",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [720, 300],
      "parameters": {
        "conditions": {
          "combinator": "and",
          "options": { "caseSensitive": true, "typeValidation": "strict" },
          "conditions": [
            {
              "leftValue": "={{ $json.requires_immediate_action }}",
              "rightValue": true,
              "operator": { "type": "boolean", "operation": "true" }
            }
          ]
        }
      }
    },
    {
      "id": "route-to-high-priority",
      "name": "Route to High Priority",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [960, 200],
      "parameters": {
        "url": "http://n8n:5678/webhook/high-priority-alert",
        "requestMethod": "POST",
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ $json }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            { "name": "Content-Type", "value": "application/json" },
            { "name": "X-Source", "value": "wazuh-webhook-receiver" }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": { "enabled": true, "maxRetries": 2, "retryInterval": 3000 }
        }
      }
    },
    {
      "id": "buffer-standard-alert",
      "name": "Buffer Standard Alert (FastAPI)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [960, 420],
      "parameters": {
        "url": "http://foundation-sec:8000/alerts",
        "requestMethod": "POST",
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ $json }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            { "name": "Content-Type", "value": "application/json" },
            {
              "name": "Authorization",
              "value": "Bearer {{ $node[\"Get Wazuh Token\"].json.data.token }}"
            }
          ]
        },
        "options": {
          "timeout": 15000,
          "retry": { "enabled": true, "maxRetries": 3, "retryInterval": 2000 }
        }
      }
    },
    {
      "id": "log-processing",
      "name": "Log Processing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1200, 300],
      "parameters": {
        "jsCode": "const a = $('Normalize Alert').first().json; const hp = a.requires_immediate_action; const log = { timestamp: new Date().toISOString(), alert_id: a.alert_id, rule_id: a.rule_id, rule_description: a.rule_description, severity: a.severity, agent: `${a.agent_name} (${a.agent_ip})`, processing_path: hp ? 'high_priority' : 'standard', response_ms: Date.now() - new Date(a.received_at).getTime() }; console.log('Wazuh alert processed', log); return { processing_summary: log, notification_needed: a.severity !== 'low', severity: a.severity, alert: a };"
      }
    },
    {
      "id": "check-notification",
      "name": "Check Notification Needed",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1420, 300],
      "parameters": {
        "conditions": {
          "combinator": "and",
          "options": { "typeValidation": "strict" },
          "conditions": [
            {
              "leftValue": "={{ $json.notification_needed }}",
              "rightValue": true,
              "operator": { "type": "boolean", "operation": "true" }
            }
          ]
        }
      }
    },
    {
      "id": "create-slack-payload",
      "name": "Create Slack Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1640, 200],
      "parameters": {
        "jsCode": "const a = $json.alert; const emoji = { critical: 'üö®', high: '‚ö†Ô∏è', medium: 'üî∂', low: '‚ÑπÔ∏è' }; const color = { critical: '#FF0000', high: '#FFA500', medium: '#FFFF00', low: '#00FF00' }; const payload = { text: `${emoji[a.severity]} Wazuh ${a.severity.toUpperCase()} alert`, attachments: [{ color: color[a.severity], fields: [ { title: 'Alert ID', value: a.alert_id, short: true }, { title: 'Rule Level', value: String(a.rule_level), short: true }, { title: 'Agent', value: `${a.agent_name} (${a.agent_ip})`, short: true }, { title: 'Location', value: a.location, short: true }, { title: 'Rule', value: a.rule_description, short: false } ], footer: 'Wazuh SIEM', ts: Math.floor(new Date(a.timestamp).getTime()/1000) }] }; if (a.full_log) payload.attachments[0].fields.push({ title: 'Log Sample', value: '```' + a.full_log.substring(0, 200) + '...```', short: false }); return { slack: payload };"
      }
    },
    {
      "id": "send-slack",
      "name": "Send Slack",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1860, 200],
      "parameters": {
        "url": "={{ $env.SLACK_WEBHOOK_URL }}",
        "requestMethod": "POST",
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ $json.slack }}",
        "options": { "timeout": 8000 },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            { "name": "Content-Type", "value": "application/json" }
          ]
        }
      }
    },
    {
      "id": "create-response",
      "name": "Create Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2080, 300],
      "parameters": {
        "jsCode": "const a = $('Normalize Alert').first().json; const resp = { status: 'success', alert_id: a.alert_id, severity: a.severity, processing_path: a.requires_immediate_action ? 'high_priority' : 'standard', received_at: a.received_at, processed_at: new Date().toISOString() }; return resp;"
      }
    },
    {
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2300, 300],
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      }
    },
    {
      "id": "handle-error",
      "name": "Handle Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1420, 520],
      "parameters": {
        "jsCode": "const e = $input.first(); const a = $('Normalize Alert').first()?.json; return { status: 'error', alert_id: a?.alert_id || 'unknown', error_message: e.message || 'Unknown error', timestamp: new Date().toISOString(), fallback_action: 'Logged for manual review' };"
      }
    }
  ],
  "connections": {
    "Wazuh Webhook Receiver": { "main": [[{ "node": "Normalize Alert", "type": "main", "index": 0 }]] },
    "Normalize Alert": {
      "main": [[{ "node": "Check Priority", "type": "main", "index": 0 }]],
      "error": [[{ "node": "Handle Error", "type": "main", "index": 0 }]]
    },
    "Get Wazuh Token": {},
    "Check Priority": {
      "main": [
        [{ "node": "Route to High Priority", "type": "main", "index": 0 }],
        [{ "node": "Buffer Standard Alert (FastAPI)", "type": "main", "index": 0 }]
      ]
    },
    "Route to High Priority": {
      "main": [[{ "node": "Log Processing", "type": "main", "index": 0 }]],
      "error": [[{ "node": "Handle Error", "type": "main", "index": 0 }]]
    },
    "Buffer Standard Alert (FastAPI)": {
      "main": [[{ "node": "Log Processing", "type": "main", "index": 0 }]],
      "error": [[{ "node": "Handle Error", "type": "main", "index": 0 }]]
    },
    "Log Processing": {
      "main": [[{ "node": "Check Notification Needed", "type": "main", "index": 0 }]]
    },
    "Check Notification Needed": {
      "main": [
        [{ "node": "Create Slack Payload", "type": "main", "index": 0 }],
        [{ "node": "Create Response", "type": "main", "index": 0 }]
      ]
    },
    "Create Slack Payload": { "main": [[{ "node": "Send Slack", "type": "main", "index": 0 }]] },
    "Send Slack": { "main": [[{ "node": "Create Response", "type": "main", "index": 0 }]] },
    "Create Response": { "main": [[{ "node": "Webhook Response", "type": "main", "index": 0 }]] },
    "Handle Error": { "main": [[{ "node": "Webhook Response", "type": "main", "index": 0 }]] }
  },
  "settings": {
    "timezone": "UTC",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": { "enabled": true }
  },
  "meta": { "templateCredsSetupCompleted": true },
  "versionId": "1"
}
