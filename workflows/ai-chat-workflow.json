{
  "name": "Foundation-Sec AI Chat",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chat",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "chat"
    },
    {
      "parameters": {
        "url": "http://foundation-sec:8000/v1/chat/completions",
        "authentication": "none",
        "requestMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={\n  \"model\": \"={{ $json.body.model || 'foundation-sec' }}\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a helpful security assistant.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $json.body.message || 'Hello' }}\"\n    }\n  ],\n  \"max_tokens\": 256,\n  \"temperature\": 0.7,\n  \"stream\": false\n}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "foundation-sec-request",
      "name": "Foundation-Sec API Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract the AI response from Foundation-Sec API (OpenAI style)\nconst response = $input.first().json;\nconst choice = (response && response.choices && response.choices[0]) ? response.choices[0] : null;\nconst aiMessage = choice && choice.message && choice.message.content ? choice.message.content : 'No response from AI';\nconst model = response.model || 'foundation-sec';\n\nreturn {\n  success: true,\n  ai_response: aiMessage,\n  model_used: model,\n  timestamp: new Date().toISOString(),\n  original_message: $('Webhook').first().json.body?.message || 'No message provided'\n};"
      },
      "id": "format-response",
      "name": "Format Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "webhook-response",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [900, 300]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Foundation-Sec API Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Foundation-Sec API Request": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "timezone": "UTC"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "ollama-chat-workflow",
  "tags": [
    {
      "createdAt": "2025-08-21T18:00:00.000Z",
      "updatedAt": "2025-08-21T18:00:00.000Z",
      "id": "ai-integration",
      "name": "AI Integration"
    }
  ]
}
