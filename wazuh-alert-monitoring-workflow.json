{
  "name": "Wazuh Alert Monitoring",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 2
            }
          ]
        }
      },
      "id": "alert-polling-trigger",
      "name": "Alert Polling Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "url": "={{ ($env.WAZUH_API_URL || 'https://172.20.18.14:55000') + '/' }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "requestMethod": "GET",
        "options": {
          "timeout": 10000,
          "allowUnauthorizedCerts": true
        }
      },
      "id": "api-health-check",
      "name": "Wazuh API Health Check",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "={{ ($env.WAZUH_API_URL || 'https://172.20.18.14:55000') + '/security/user/authenticate?raw=true' }}",
        "authentication": "none",
        "requestMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "={{ 'Basic ' + $base64(($env.WAZUH_API_USER || 'wazuh') + ':' + ($env.WAZUH_API_PASSWORD || '')) }}"
            }
          ]
        },
        "sendBody": false,
        "options": {
          "timeout": 20000,
          "retry": {
            "enabled": true,
            "maxRetries": 2,
            "retryInterval": 1000
          },
          "allowUnauthorizedCerts": true
        }
      },
      "id": "get-wazuh-token",
      "name": "Get Wazuh Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 180]
    },
    {
      "parameters": {
        "jsCode": "// Validate Wazuh API health before proceeding\nconst healthResponse = $input.first().json;\nconst sessionData = $('Alert Polling Trigger').first().json;\n\nlet apiHealthy = false;\nlet healthStatus = 'unknown';\n\ntry {\n  // Check if Wazuh API responded successfully\n  if (healthResponse && (healthResponse.status === 200 || healthResponse.statusCode === 200)) {\n    apiHealthy = true;\n    healthStatus = 'healthy';\n  } else {\n    healthStatus = 'error';\n  }\n} catch (error) {\n  console.error('Wazuh API health check failed:', error);\n  healthStatus = 'error';\n}\n\nconsole.log(`Wazuh API health status: ${healthStatus}`);\n\nif (!apiHealthy) {\n  console.warn('Wazuh API is not healthy, skipping alert polling');\n  return {\n    api_healthy: false,\n    health_status: healthStatus,\n    skip_polling: true,\n    session_id: sessionData.session_id,\n    timestamp: new Date().toISOString()\n  };\n}\n\nreturn {\n  api_healthy: true,\n  health_status: healthStatus,\n  proceed_with_polling: true,\n  session_id: sessionData.session_id,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "validate-api-health",
      "name": "Validate API Health",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "url": "={{ ($env.WAZUH_API_URL || 'https://172.20.18.14:55000') + '/alerts' }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "requestMethod": "GET",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "={{ 'Bearer ' + $('Get Wazuh Token').first().json }}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxRetries": 2,
            "retryInterval": 5000
          },
          "allowUnauthorizedCerts": true
        }
      },
      "id": "fetch-buffered-alerts",
      "name": "Fetch Wazuh Alerts",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process Wazuh alerts\nconst response = $input.first().json;\nconst healthCheck = $('Validate API Health').first().json;\n\nif (!response.data || !response.data.affected_items || response.data.affected_items.length === 0) {\n  return {\n    no_alerts: true,\n    message: 'No new alerts from Wazuh API',\n    api_healthy: healthCheck.api_healthy,\n    check_time: new Date().toISOString()\n  };\n}\n\n// Process each alert\nconst processedAlerts = response.data.affected_items.map(alert => {\n  return {\n    alert_id: alert.id,\n    timestamp: alert.timestamp,\n    rule_id: alert.rule?.id,\n    rule_level: alert.rule?.level,\n    rule_description: alert.rule?.description,\n    agent_name: alert.agent?.name,\n    agent_ip: alert.agent?.ip,\n    location: alert.location,\n    full_log: alert.full_log,\n    severity: alert.rule?.level >= 10 ? 'high' : alert.rule?.level >= 7 ? 'medium' : 'low',\n    processed_at: new Date().toISOString(),\n    source: 'wazuh_api'\n  };\n});\n\nreturn {\n  alerts_found: true,\n  alert_count: response.data.affected_items.length,\n  alerts: processedAlerts,\n  api_healthy: healthCheck.api_healthy,\n  processing_time: new Date().toISOString()\n};"
      },
      "id": "process-alerts",
      "name": "Process Alerts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-alerts",
              "leftValue": "={{ $json.alerts_found }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-alerts-exist",
      "name": "Check Alerts Exist",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "jsCode": "// Split alerts for individual processing\nconst data = $input.first().json;\n\nif (!data.alerts || data.alerts.length === 0) {\n  return [];\n}\n\n// Return each alert as a separate item for parallel processing\nreturn data.alerts.map(alert => ({\n  ...alert,\n  total_alerts_in_batch: data.alert_count,\n  batch_processing_time: data.processing_time\n}));"
      },
      "id": "split-alerts",
      "name": "Split Alerts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "high-severity",
              "leftValue": "={{ $json.severity }}",
              "rightValue": "high",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-high-severity",
      "name": "Check High Severity",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1780, 200]
    },
    {
      "parameters": {
        "url": "http://n8n:5678/webhook/high-priority-alert",
        "authentication": "none",
        "requestMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {
          "timeout": 15000
        }
      },
      "id": "trigger-high-priority-workflow",
      "name": "Trigger High Priority Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [2000, 100]
    },
    {
      "parameters": {
        "jsCode": "// Log standard alert processing\nconst alert = $input.first().json;\n\nconsole.log(`Processing standard alert: ${alert.alert_id} - ${alert.rule_description}`);\n\nreturn {\n  alert_id: alert.alert_id,\n  severity: alert.severity,\n  action: 'logged',\n  processed_at: new Date().toISOString(),\n  message: `Standard alert ${alert.alert_id} logged successfully`\n};"
      },
      "id": "log-standard-alert",
      "name": "Log Standard Alert",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "jsCode": "// Handle Wazuh API errors\nconst error = $input.first();\n\nconsole.error('Wazuh API health check failed:', error);\n\nreturn {\n  error: true,\n  message: 'Wazuh API is not accessible',\n  timestamp: new Date().toISOString(),\n  retry_in_next_cycle: true,\n  wazuh_api: '172.20.18.14:55000'\n};"
      },
      "id": "handle-api-error",
      "name": "Handle API Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 480]
    }
  ],
  "connections": {
    "Alert Polling Trigger": {
      "main": [
        [
          {
            "node": "Wazuh API Health Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wazuh API Health Check": {
      "main": [
        [
          {
            "node": "Validate API Health",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Handle API Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate API Health": {
      "main": [
        [
          {
            "node": "Get Wazuh Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Wazuh Token": {
      "main": [
        [
          {
            "node": "Fetch Wazuh Alerts",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Handle API Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Wazuh Alerts": {
      "main": [
        [
          {
            "node": "Process Alerts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Alerts": {
      "main": [
        [
          {
            "node": "Check Alerts Exist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Alerts Exist": {
      "main": [
        [
          {
            "node": "Split Alerts",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Split Alerts": {
      "main": [
        [
          {
            "node": "Check High Severity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check High Severity": {
      "main": [
        [
          {
            "node": "Trigger High Priority Workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Standard Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "timezone": "UTC",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "handle-api-error"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "wazuh-direct-alert-monitoring-workflow",
  "tags": [
    {
      "createdAt": "2025-01-21T18:00:00.000Z",
      "updatedAt": "2025-01-21T18:00:00.000Z",
      "id": "wazuh-integration",
      "name": "Wazuh Integration"
    },
    {
      "createdAt": "2025-01-21T18:00:00.000Z",
      "updatedAt": "2025-01-21T18:00:00.000Z",
      "id": "alert-monitoring",
      "name": "Alert Monitoring"
    }
  ]
}
